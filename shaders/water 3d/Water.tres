[gd_resource type="ShaderMaterial" load_steps=5 format=2]

[ext_resource path="res://assets/water_normal.png" type="Texture" id=1]
[ext_resource path="res://assets/water-pool-texture-seamless-and-free.jpg" type="Texture" id=2]
[ext_resource path="res://assets/water_uv_offset.png" type="Texture" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

//波浪运动
uniform vec2 amplitude = vec2(.05,.03);
uniform vec2 frequency = vec2(4.0,3.5);
uniform vec2 time_factor = vec2(2.0,3.0);

//贴图和透明
uniform sampler2D texturemap:hint_albedo;
uniform vec2 texture_scale = vec2(4.0,4.0);

//水面抖动
uniform sampler2D uv_offset_texture:hint_black;
uniform vec2 uv_offset_scale = vec2(.2,.2);
uniform float uv_offset_time_scale = .02;
uniform float uv_offset_amplitude = .1;

//法相贴图
uniform sampler2D normalmap : hint_normal;

//将透过水面看到的其他3d对象扭曲
uniform float refraction = .15;

float height(vec2 pos, float time){
	return amplitude.x*sin(pos.x*frequency.x+ time*time_factor.x) + amplitude.y*sin(pos.y*frequency.y+ time*time_factor.y);
}
 
void vertex(){
	VERTEX.y = height(VERTEX.xz, TIME);
	TANGENT = normalize(vec3(.0, height(VERTEX.xz+vec2(.0,.2), TIME) - height(VERTEX.xz + vec2(.0, -.2), TIME), .4));
	BINORMAL = normalize(vec3(.4, height(VERTEX.xz+vec2(.2,.0), TIME) - height(VERTEX.xz + vec2(-.2, .0), TIME), .0));
	NORMAL = cross(TANGENT, BINORMAL);
}

void fragment(){
	vec2 base_uv_offset = UV*uv_offset_scale;
	base_uv_offset+=TIME*uv_offset_time_scale;
	vec2 texture_based_offset = texture(uv_offset_texture, base_uv_offset).rg;
	texture_based_offset = texture_based_offset*2.0 - 1.0;
	
	vec2 texture_uv = UV*texture_scale;
	texture_uv += uv_offset_amplitude * texture_based_offset;
	
	ALBEDO = texture(texturemap, texture_uv).rgb;
	if(ALBEDO.r>.9 && ALBEDO.g>.9 && ALBEDO.b>.9){
		ALPHA = 1.0;
	}else{
		ALPHA = .8;
	}
	
	NORMALMAP = texture(normalmap, base_uv_offset).rgb;
	
	METALLIC = .5;
	ROUGHNESS = .2;
	
	vec3 ref_normal = normalize(mix(NORMAL, TANGENT*NORMALMAP.x+BINORMAL*NORMALMAP.y+NORMAL*NORMALMAP.z, NORMALMAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy*refraction;
	EMISSION += textureLod(SCREEN_TEXTURE, ref_ofs, ROUGHNESS*8.0).rgb * (1.0-ALPHA);
	ALBEDO*=ALPHA;
	ALPHA = 1.0;
	
}"

[resource]
shader = SubResource( 1 )
shader_param/amplitude = Vector2( 0.05, 0.03 )
shader_param/frequency = Vector2( 4, 3.5 )
shader_param/time_factor = Vector2( 2, 3 )
shader_param/texture_scale = Vector2( 4, 4 )
shader_param/uv_offset_scale = Vector2( 0.2, 0.2 )
shader_param/uv_offset_time_scale = 0.02
shader_param/uv_offset_amplitude = 0.1
shader_param/refraction = 0.15
shader_param/texturemap = ExtResource( 2 )
shader_param/uv_offset_texture = ExtResource( 3 )
shader_param/normalmap = ExtResource( 1 )
